{"version":3,"sources":["pages/Layout.tsx","design/color.ts","atom/color.ts","pages/Color.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledDivPageBox","styled","div","StyledDivPageHeading","StyledDivPageBody","uiPrimaryUX","color","uiPrimaryFont","uiPrimaryInvertFont","mainAtom","atomWithReset","reducer","prev","action","undefined","Error","type","next","onReduceChangeColor","StyledStackHeading","Stack","toString","darken","StyledStackBox","StyledStackShadeBox","StyledStackColorPickerBox","StyledStackColorResultBox","Color","intl","useIntl","useReducerAtom","mainReducer","state","dispatch","useColorPropsBootstrap","onHandleCalculateFontColor","pickedColor","choosed","red","bignumber","mul","green","blue","plus","toNumber","Text","as","variant","formatMessage","id","horizontal","width","onChange","hex","className","style","backgroundColor","textAlign","map","stackClassName","classNameIndex","populate","index","base","morder","processed","lighten","nanoid","appTheme","palette","App","initializeIcons","messages","korean","locale","defaultLocale","ThemeProvider","theme","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","styles","css","emotionReset","document","getElementById"],"mappings":"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","file":"static/js/main.9c8a003a.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const StyledDivPageBox = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport const StyledDivPageHeading = styled.div`\n  width: 100vw;\n  height: 60px;\n`;\n\nexport const StyledDivPageBody = styled.div`\n  width: 100vw;\n  height: calc(100vh - 60px);\n`;\n","import color from 'color'\n\nexport const uiPrimaryUX = color('#28a8ea');\nexport const uiPrimaryFont = color('#333');\nexport const uiPrimaryInvertFont = color('#eee');\n","import { atomWithReset } from 'jotai/utils'\n\ninterface IColorPropsAtom {\n  color: string;\n}\n\nconst defaultValue: IColorPropsAtom = {\n  color: '#112233'\n}\n\nexport const mainAtom = atomWithReset(defaultValue)\n\nconst onReduceChangeColor = (prev: IColorPropsAtom, action: { type: 'change-color', color: string }) => {\n  try {\n    const next = { ...prev };\n    next.color = action.color;\n\n    return next;\n   } catch {\n    return prev;\n  }\n}\n\nexport type TColorPropsReducerAction =\n  | Parameters<typeof onReduceChangeColor>[1]\n\nexport const reducer = (prev: IColorPropsAtom, action?: TColorPropsReducerAction) => {\n  if (action === undefined) {\n    throw new Error('action missed');\n  }\n\n  if (action.type === 'change-color') {\n    return onReduceChangeColor(prev, action)\n  }\n\n  throw new Error('action missed');\n}\n\n\n","import { Text, Stack } from \"@fluentui/react\";\nimport { SketchPicker } from \"react-color\";\nimport { useIntl } from \"react-intl\";\nimport styled from \"@emotion/styled\";\nimport {\n  StyledDivPageBody,\n  StyledDivPageBox,\n  StyledDivPageHeading,\n} from \"./Layout\";\nimport {\n  uiPrimaryFont,\n  uiPrimaryInvertFont,\n  uiPrimaryUX,\n} from \"../design/color\";\nimport { mainAtom, reducer as mainReducer } from \"../atom/color\";\nimport { useReducerAtom } from \"jotai/utils\";\nimport color from \"color\";\nimport { bignumber } from \"mathjs\";\nimport { populate } from \"my-easy-fp\";\nimport { nanoid } from \"nanoid\";\n\nconst StyledStackHeading = styled(Stack)`\n  width: 100%;\n  height: 100%;\n  background-color: ${uiPrimaryUX.toString()};\n  justify-content: center;\n  padding-left: 2em;\n\n  h1 {\n    color: ${uiPrimaryUX.darken(0.4).toString()};\n  }\n`;\n\nconst StyledStackBox = styled(Stack)`\n  padding: 2em;\n  justify-content: center;\n`;\n\nconst StyledStackShadeBox = styled(Stack)`\n  padding: 2em;\n  justify-content: center;\n\n  .lighten-shade {\n    width: 250px;\n    box-shadow: rgb(0 0 0 / 15%) 0px 3px 12px;\n    border-radius: 5px;\n    margin-right: 1em;\n  }\n\n  .darken-shade {\n    width: 250px;\n    box-shadow: rgb(0 0 0 / 15%) 0px 3px 12px;\n    border-radius: 5px;\n  }\n\n  .lighten-shade,\n  .darken-shade {\n    align-content: center;\n\n    .shade {\n      .shade-morder {\n        width: 6em;\n        padding-left: 1em;\n        align-items: flex-start;\n      }\n\n      .shade-hex {\n        flex: 1;\n      }\n\n      .shade-morder,\n      .shade-hex {\n        justify-content: center;\n      }\n\n      height: 40px;\n    }\n  }\n`;\n\nconst StyledStackColorPickerBox = styled(Stack)`\n  margin-right: 2em;\n`;\n\nconst StyledStackColorResultBox = styled(Stack)`\n  .color-display-panel {\n    width: 400px;\n    height: 300px;\n    box-shadow: rgb(0 0 0 / 15%) 0px 3px 12px;\n    border-radius: 5px;\n    padding-top: 2em;\n  }\n`;\n\nconst useColorPropsBootstrap = () => {\n  const [state, dispatch] = useReducerAtom(mainAtom, mainReducer);\n\n  return { state, dispatch };\n};\n\nconst Color: React.FC = () => {\n  const intl = useIntl();\n  const shadeLevel = 10;\n  const { state, dispatch } = useColorPropsBootstrap();\n\n  const onHandleCalculateFontColor = (pickedColor: string) => {\n    // https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color\n    // if (red*0.299 + green*0.587 + blue*0.114) > 186 use #000000 else use #ffffff\n\n    const choosed = color(pickedColor);\n\n    const red = bignumber(choosed.red()).mul(bignumber(0.299));\n    const green = bignumber(choosed.green()).mul(bignumber(0.587));\n    const blue = bignumber(choosed.blue()).mul(bignumber(0.114));\n    const sum = red.plus(green).plus(blue);\n\n    if (sum.toNumber() > 186) {\n      return uiPrimaryFont.toString(); // black\n    } else {\n      return uiPrimaryInvertFont.toString(); // white\n    }\n  };\n\n  return (\n    <StyledDivPageBox>\n      <StyledDivPageHeading>\n        <StyledStackHeading>\n          <Text as=\"h1\" variant=\"xxLarge\">\n            {intl.formatMessage({ id: \"color.heading\" })}\n          </Text>\n        </StyledStackHeading>\n      </StyledDivPageHeading>\n\n      <StyledDivPageBody>\n        <StyledStackBox horizontal>\n          <StyledStackColorPickerBox>\n            <SketchPicker\n              color={state.color}\n              width=\"300px\"\n              onChange={(color) =>\n                dispatch({ type: \"change-color\", color: color.hex })\n              }\n            />\n          </StyledStackColorPickerBox>\n          <StyledStackColorResultBox>\n            <Stack\n              className=\"color-display-panel\"\n              style={{ backgroundColor: `${state.color}` }}\n            >\n              <Text\n                as=\"span\"\n                variant=\"xxLarge\"\n                style={{\n                  color: onHandleCalculateFontColor(state.color),\n                  textAlign: \"center\",\n                }}\n              >\n                {state.color}\n              </Text>\n            </Stack>\n          </StyledStackColorResultBox>\n        </StyledStackBox>\n\n        <StyledStackShadeBox horizontal>\n          {[\"lighten-shade\", \"darken-shade\"].map(\n            (stackClassName, classNameIndex) => {\n              return (\n                <Stack key={nanoid(classNameIndex)} className={stackClassName}>\n                  {populate(shadeLevel).map((index) => {\n                    const base = color(state.color);\n                    const morder = bignumber(index).mul(bignumber(0.05));\n                    const processed =\n                      stackClassName === \"lighten-shade\"\n                        ? base.lighten(morder.toNumber())\n                        : base.darken(morder.toNumber());\n                    return (\n                      <Stack\n                        key={nanoid(index)}\n                        className=\"shade\"\n                        style={{ backgroundColor: processed.toString() }}\n                        horizontal\n                      >\n                        <Stack className=\"shade-morder\">\n                          <Text\n                            as=\"span\"\n                            variant=\"medium\"\n                            style={{\n                              textAlign: \"center\",\n                              color: onHandleCalculateFontColor(\n                                processed.hex()\n                              ),\n                            }}\n                          >\n                            {morder.mul(100).toString()}% - {morder.toString()}\n                          </Text>\n                        </Stack>\n                        <Stack className=\"shade-hex\">\n                          <Text\n                            as=\"span\"\n                            variant=\"medium\"\n                            style={{\n                              textAlign: \"center\",\n                              color: onHandleCalculateFontColor(\n                                processed.hex()\n                              ),\n                            }}\n                          >\n                            {processed.hex()}\n                          </Text>\n                        </Stack>\n                      </Stack>\n                    );\n                  })}\n                </Stack>\n              );\n            }\n          )}\n        </StyledStackShadeBox>\n      </StyledDivPageBody>\n    </StyledDivPageBox>\n  );\n};\n\nexport default Color;\n","import React from \"react\";\nimport { initializeIcons } from \"@fluentui/font-icons-mdl2\";\nimport { PartialTheme, ThemeProvider } from \"@fluentui/react\";\nimport korean from \"./i18n/korean.json\";\nimport { IntlProvider } from \"react-intl\";\nimport { MemoryRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Color from \"./pages/Color\";\n\nconst appTheme: PartialTheme = {\n  palette: {},\n};\n\nconst App: React.FC = () => {\n  initializeIcons();\n\n  return (\n    <IntlProvider messages={korean} locale=\"ko\" defaultLocale=\"ko\">\n      <ThemeProvider theme={appTheme}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" render={() => <Color />} />\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </IntlProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport emotionReset from 'emotion-reset'\nimport { Global, css } from '@emotion/react'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Global\n      styles={css`\n      ${emotionReset}\n\n      *, *::after, *::before {\n        box-sizing: border-box;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-smoothing: antialiased;\n      }\n    `} />\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}